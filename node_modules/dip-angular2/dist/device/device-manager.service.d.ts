import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { DeviceService } from './device.service';
import { TransportContainerService } from '../transport/transport-container.service';
export declare class DeviceManagerService {
    transport: TransportContainerService;
    devices: Array<DeviceService>;
    activeDeviceIndex: number;
    private httpTimeout;
    constructor();
    setHttpTimeout(newTimeout: number): void;
    getHttpTimeout(): number;
    connect(uri: any): Observable<any>;
    connectBridge(uri: string): Observable<any>;
    connectLocal(deviceName: string): Observable<any>;
    getActiveDevice(): DeviceService;
    setActiveDevice(_activeDeviceIndex: number): void;
    addDeviceFromDescriptor(uri: string, deviceDescriptor: any): void;
    deviceExists(uri: string, deviceDescriptor: any): number;
    private xmlToJson(data);
    getLatestFirmwareVersionFromArray(firmwareVersionsArray: string[]): string;
    getLatestFirmwareVersionFromUrl(firmwareUrl: string): Promise<string>;
    getFirmwareVersionsFromUrl(firmwareUrl: string): Promise<{}>;
}
