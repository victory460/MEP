import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { AwgInstrumentService } from './instruments/awg/awg-instrument.service';
import { DcInstrumentService } from './instruments/dc/dc-instrument.service';
import { LaInstrumentService } from './instruments/la/la-instrument.service';
import { OscInstrumentService } from './instruments/osc/osc-instrument.service';
import { TriggerInstrumentService } from './instruments/trigger/trigger-instrument.service';
import { GpioInstrumentService } from './instruments/gpio/gpio-instrument.service';
import { FileService } from './file.service';
import { TransportContainerService } from '../transport/transport-container.service';
export declare class DeviceService {
    transport: TransportContainerService;
    descriptorObject: any;
    rootUri: string;
    deviceMake: string;
    deviceModel: string;
    firmwareVersion: any;
    calibrationSource: 'UNCALIBRATED' | 'CALIBRATED' | 'FACTORY' | 'USER';
    macAddress: string;
    instruments: {
        awg: AwgInstrumentService;
        dc: DcInstrumentService;
        la: LaInstrumentService;
        osc: OscInstrumentService;
        trigger: TriggerInstrumentService;
        gpio: GpioInstrumentService;
    };
    file: FileService;
    firmwareRepositoryUrl: string;
    listFirmwareUrl: string;
    private httpTimeout;
    constructor(_rootUri: string, deviceDescriptor: any, httpTimeout: number);
    multiCommand(commandObject: any): Observable<any>;
    _genericResponseHandler(commandObject: Object): Observable<any>;
    resetInstruments(): Observable<any>;
    storageGetLocations(): Observable<any>;
    calibrationGetStorageTypes(): Observable<any>;
    calibrationGetInstructions(): Observable<any>;
    calibrationStart(): Observable<any>;
    calibrationLoad(type: string): Observable<any>;
    calibrationRead(): Observable<any>;
    calibrationSave(type: string): Observable<any>;
    calibrationGetStatus(): Observable<any>;
    nicList(): Observable<any>;
    nicGetStatus(adapter: string): Observable<any>;
    nicConnect(adapter: string, parameterSet: 'activeParameterSet' | 'workingParameterSet', force: boolean): Observable<any>;
    nicDisconnect(adapter: string): Observable<any>;
    wifiScan(adapter: string): Observable<any>;
    wifiReadScannedNetworks(adapter: string): Observable<any>;
    wifiSetParameters(adapter: string, ssid: string, securityType: 'wep40' | 'wep104' | 'wpa' | 'wpa2', autoConnect: boolean, passphrase?: string, keys?: string, keyIndex?: number): Observable<any>;
    wifiListSavedParameters(storageLocation: string): Observable<any>;
    wifiDeleteParameters(storageLocation: string, ssid: string): Observable<any>;
    wifiSaveParameters(storageLocation: string): Observable<any>;
    wifiLoadParameters(storageLocation: string, ssid: string): Observable<any>;
}
