import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { GenericInstrumentService } from '../generic-instrument.service';
import { TriggerChannelService } from './trigger-channel.service';
import { TransportContainerService } from '../../../transport/transport-container.service';
export declare class TriggerInstrumentService extends GenericInstrumentService {
    readonly numChans: number;
    readonly chans: TriggerChannelService[];
    constructor(_transport: TransportContainerService, _triggerInstrumentDescriptor: any);
    setParametersJson(chans: number[], sources: Object[], targetsArray: Object[]): {
        "trigger": {};
    };
    setParametersParse(chan: any, command: any): string;
    setParameters(chans: number[], sources: Object[], targetsArray: Object[]): Observable<any>;
    getCurrentState(chans: number[]): Observable<any>;
    getCurrentStateJson(chans: number[]): {
        trigger: {};
    };
    getCurrentStateParse(chan: any, responseObject: any): string;
    singleJson(chans: number[]): {
        "trigger": {};
    };
    singleParse(chan: any, command: any): string;
    single(chans: number[]): Observable<any>;
    stopJson(chans: number[]): {
        trigger: {};
    };
    stopParse(chan: any, command: any): string;
    stop(chans: number[]): Observable<any>;
    forceTriggerJson(chans: number[]): {
        "trigger": {};
    };
    forceTriggerParse(chan: any, command: any): string;
    forceTrigger(chans: number[]): Observable<any>;
}
