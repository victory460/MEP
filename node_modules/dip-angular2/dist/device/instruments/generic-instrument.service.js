import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { TransportContainerService } from '../../transport/transport-container.service';
export var GenericInstrumentService = (function () {
    function GenericInstrumentService(_transport, _endpoint) {
        this.endpoint = '';
        this.transport = _transport;
        this.endpoint = _endpoint;
    }
    GenericInstrumentService.prototype._genericResponseHandler = function (commandObject) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.transport.writeRead('/', JSON.stringify(commandObject), 'json').subscribe(function (arrayBuffer) {
                var data;
                try {
                    var stringify = String.fromCharCode.apply(null, new Int8Array(arrayBuffer.slice(0)));
                    console.log(stringify);
                    data = JSON.parse(stringify);
                }
                catch (e) {
                    observer.error(e);
                    return;
                }
                if (data == undefined || data.agent != undefined) {
                    observer.error(data);
                    return;
                }
                for (var instrument in data) {
                    for (var channel in data[instrument]) {
                        if (data[instrument][channel][0].statusCode > 0) {
                            observer.error(data);
                            return;
                        }
                    }
                }
                observer.next(data);
                //Handle device errors and warnings
                observer.complete();
            }, function (err) {
                observer.error(err);
            }, function () {
                observer.complete();
            });
        });
    };
    GenericInstrumentService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    GenericInstrumentService.ctorParameters = [
        { type: TransportContainerService, },
        null,
    ];
    return GenericInstrumentService;
}());
//# sourceMappingURL=generic-instrument.service.js.map