import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { GenericInstrumentService } from '../generic-instrument.service';
import { AwgChannelService } from './awg-channel.service';
import { TransportContainerService } from '../../../transport/transport-container.service';
import { SettingsObject } from './awg-instrument.service';
export declare class AwgInstrumentService extends GenericInstrumentService {
    readonly numChans: number;
    readonly chans: Array<AwgChannelService>;
    constructor(_transport: TransportContainerService, _awgInstrumentDescriptor: any);
    private setArbitraryWaveform(chans, waveforms, dataTypes);
    getCurrentState(chans: number[]): Observable<any>;
    setRegularWaveform(chans: number[], settings: SettingsObject[]): Observable<any>;
    setRegularWaveformJson(chans: number[], settings: SettingsObject[]): {
        "awg": {};
    };
    setRegularWaveformParse(chan: any, responseObject: any): any;
    runJson(chans: number[]): {
        "awg": {};
    };
    runParse(chan: any, responseObject: any): any;
    run(chans: number[]): Observable<any>;
    stop(chans: number[]): Observable<any>;
}
export interface SettingsObject {
    signalType: string;
    signalFreq: number;
    vpp: number;
    vOffset: number;
}
