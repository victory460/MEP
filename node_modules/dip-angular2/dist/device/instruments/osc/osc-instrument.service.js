var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { GenericInstrumentService } from '../generic-instrument.service';
import { OscChannelService } from './osc-channel.service';
import { WaveformService } from '../../../data-types/waveform.service';
import { TransportContainerService } from '../../../transport/transport-container.service';
import { CommandUtilityService } from '../../../utilities/command-utility.service';
export var OscInstrumentService = (function (_super) {
    __extends(OscInstrumentService, _super);
    function OscInstrumentService(_transport, _oscInstrumentDescriptor) {
        _super.call(this, _transport, '/');
        this.chans = [];
        this.numDataBuffers = 8;
        this.dataBuffer = [];
        this.dataBufferWriteIndex = 0;
        this.dataBufferReadIndex = 0;
        //Populate DC supply parameters
        this.numChans = _oscInstrumentDescriptor.numChans;
        this.commandUtilityService = new CommandUtilityService();
        //Populate channels        
        for (var channel in _oscInstrumentDescriptor) {
            if (channel !== 'numChans') {
                this.chans.push(new OscChannelService(_oscInstrumentDescriptor[channel]));
            }
        }
        for (var i = 0; i < this.numDataBuffers; i++) {
            this.dataBuffer.push([]);
        }
    }
    OscInstrumentService.prototype.getCurrentState = function (chans) {
        var command = this.getCurrentStateJson(chans);
        return _super.prototype._genericResponseHandler.call(this, command);
    };
    OscInstrumentService.prototype.getCurrentStateJson = function (chans) {
        var command = {
            osc: {}
        };
        chans.forEach(function (element, index, array) {
            command.osc[chans[index]] =
                [
                    {
                        command: 'getCurrentState'
                    }
                ];
        });
        return command;
    };
    OscInstrumentService.prototype.getCurrentStateParse = function (chan, responseObject) {
        return 'Success';
    };
    OscInstrumentService.prototype.setParametersJson = function (chans, offsets, gains, sampleFreqs, bufferSizes, delays) {
        var command = {
            "osc": {}
        };
        chans.forEach(function (element, index, array) {
            command.osc[chans[index]] =
                [
                    {
                        command: "setParameters",
                        vOffset: Math.round(offsets[index] * 1000),
                        gain: gains[index],
                        sampleFreq: Math.round(sampleFreqs[index] * 1000),
                        bufferSize: Math.round(bufferSizes[index]),
                        triggerDelay: Math.round(delays[index] * 1000000000000)
                    }
                ];
        });
        return command;
    };
    OscInstrumentService.prototype.setParametersParse = function (chan, responseObject) {
        return 'Channel ' + chan + ' ' + responseObject.command + ' successful';
    };
    //Tell OpenScope to run once and return a buffer
    OscInstrumentService.prototype.setParameters = function (chans, offsets, gains, sampleFreqs, bufferSizes, delays) {
        if (chans.length == 0) {
            return Observable.create(function (observer) {
                observer.complete();
            });
        }
        var command = this.setParametersJson(chans, offsets, gains, sampleFreqs, bufferSizes, delays);
        return _super.prototype._genericResponseHandler.call(this, command);
    };
    //Tell OpenScope to run once and return a buffer
    OscInstrumentService.prototype.read = function (chans) {
        var _this = this;
        if (chans.length == 0) {
            return Observable.create(function (observer) {
                observer.complete();
            });
        }
        var command = {
            "osc": {}
        };
        chans.forEach(function (element, index, array) {
            command.osc[chans[index]] =
                [
                    {
                        "command": "read"
                    }
                ];
        });
        this.dataBuffer[this.dataBufferWriteIndex] = [];
        return Observable.create(function (observer) {
            _this.transport.writeRead('/', JSON.stringify(command), 'json').subscribe(function (data) {
                _this.rawPacket = data;
                _this.commandUtilityService.observableParseChunkedTransfer(data).subscribe(function (data) {
                    var command = data.json;
                    console.log(command);
                    for (var channel in command.osc) {
                        if (command.osc[channel][0].statusCode > 0) {
                            observer.error('One or more channels still acquiring');
                            return;
                        }
                        var binaryOffset = command.osc[channel][0].binaryOffset / 2;
                        var binaryData = data.typedArray.slice(binaryOffset, binaryOffset + command.osc[channel][0].binaryLength / 2);
                        var untypedArray = Array.prototype.slice.call(binaryData);
                        var scaledArray = untypedArray.map(function (voltage) {
                            return voltage / 1000;
                        });
                        var dt = 1 / (command.osc[channel][0].actualSampleFreq / 1000);
                        var pointContainer = [];
                        var triggerPosition = -1 * command.osc[channel][0].triggerDelay / Math.pow(10, 12) + dt * scaledArray.length / 2;
                        for (var i = 0; i < scaledArray.length; i++) {
                            pointContainer.push([i * dt - triggerPosition, scaledArray[i]]);
                        }
                        _this.dataBuffer[_this.dataBufferWriteIndex][parseInt(channel) - 1] = new WaveformService({
                            dt: 1 / (command.osc[channel][0].actualSampleFreq / 1000),
                            t0: 0,
                            y: scaledArray,
                            data: pointContainer,
                            pointOfInterest: command.osc[channel][0].pointOfInterest,
                            triggerPosition: command.osc[channel][0].triggerIndex,
                            seriesOffset: command.osc[channel][0].actualVOffset / 1000,
                            triggerDelay: (command.osc[channel][0].triggerDelay == undefined ? command.osc[channel][0].actualTriggerDelay : command.osc[channel][0].triggerDelay)
                        });
                    }
                    _this.dataBufferReadIndex = _this.dataBufferWriteIndex;
                    _this.dataBufferWriteIndex = (_this.dataBufferWriteIndex + 1) % _this.numDataBuffers;
                    var finish = performance.now();
                    observer.next(command);
                    //Handle device errors and warnings
                    observer.complete();
                }, function (err) {
                    observer.error(data);
                }, function () { });
            }, function (err) {
                observer.error(err);
            }, function () { });
        });
    };
    OscInstrumentService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    OscInstrumentService.ctorParameters = [
        { type: TransportContainerService, },
        null,
    ];
    return OscInstrumentService;
}(GenericInstrumentService));
//# sourceMappingURL=osc-instrument.service.js.map