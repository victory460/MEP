import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { GenericInstrumentService } from '../generic-instrument.service';
import { OscChannelService } from './osc-channel.service';
import { WaveformService } from '../../../data-types/waveform.service';
import { TransportContainerService } from '../../../transport/transport-container.service';
export declare class OscInstrumentService extends GenericInstrumentService {
    readonly numChans: number;
    readonly chans: OscChannelService[];
    readonly numDataBuffers: number;
    readonly dataBuffer: Array<Array<WaveformService>>;
    private dataBufferWriteIndex;
    dataBufferReadIndex: number;
    private commandUtilityService;
    rawPacket: ArrayBuffer;
    constructor(_transport: TransportContainerService, _oscInstrumentDescriptor: any);
    getCurrentState(chans: number[]): Observable<any>;
    getCurrentStateJson(chans: number[]): {
        osc: {};
    };
    getCurrentStateParse(chan: any, responseObject: any): string;
    setParametersJson(chans: number[], offsets: number[], gains: number[], sampleFreqs: number[], bufferSizes: number[], delays: number[]): {
        "osc": {};
    };
    setParametersParse(chan: any, responseObject: any): string;
    setParameters(chans: number[], offsets: number[], gains: number[], sampleFreqs: number[], bufferSizes: number[], delays: number[]): Observable<any>;
    read(chans: number[]): Observable<any>;
}
