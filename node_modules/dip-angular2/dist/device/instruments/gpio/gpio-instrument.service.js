var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { GenericInstrumentService } from '../generic-instrument.service';
import { TransportContainerService } from '../../../transport/transport-container.service';
export var GpioInstrumentService = (function (_super) {
    __extends(GpioInstrumentService, _super);
    function GpioInstrumentService(_transport, _gpioInstrumentDescriptor) {
        _super.call(this, _transport, '/');
        //Populate LA supply parameters
        this.numChans = _gpioInstrumentDescriptor.numChans;
        this.sinkCurrentMax = _gpioInstrumentDescriptor.sinkCurrentMax;
        this.sourceCurrentMax = _gpioInstrumentDescriptor.sourceCurrentMax;
    }
    GpioInstrumentService.prototype.setParameters = function (chans, directions) {
        var command = {
            "gpio": {}
        };
        chans.forEach(function (element, index, array) {
            command.gpio[chans[index]] =
                [
                    {
                        "command": "setParameters",
                        "direction": directions[index]
                    }
                ];
        });
        return _super.prototype._genericResponseHandler.call(this, command);
    };
    //Set the output voltage of the specified DC power supply channel.
    GpioInstrumentService.prototype.write = function (chans, values) {
        var command = {
            "gpio": {}
        };
        values.forEach(function (element, index, array) {
            command.gpio[chans[index]] =
                [
                    {
                        "command": "write",
                        "value": values[index]
                    }
                ];
        });
        return _super.prototype._genericResponseHandler.call(this, command);
    };
    //Set the output voltage of the specified DC power supply channel.
    GpioInstrumentService.prototype.read = function (chans) {
        var _this = this;
        var command = {
            "gpio": {}
        };
        chans.forEach(function (element, index, array) {
            command.gpio[chans[index]] =
                [
                    {
                        "command": "read"
                    }
                ];
        });
        return Observable.create(function (observer) {
            if (chans.length < 1) {
                observer.error('No Channels Specified');
            }
            _this.transport.writeRead(_this.endpoint, JSON.stringify(command), 'json').subscribe(function (arrayBuffer) {
                //Handle device errors and warnings
                var data;
                try {
                    data = JSON.parse(String.fromCharCode.apply(null, new Int8Array(arrayBuffer.slice(0))));
                }
                catch (e) {
                    observer.error(e);
                    return;
                }
                for (var i = 0; i < chans.length; i++) {
                    if (data.gpio == undefined || data.gpio[chans[i]][0].statusCode > 0 || data.agent != undefined) {
                        observer.error(data);
                        return;
                    }
                }
                observer.next(data);
                observer.complete();
            }, function (err) {
                observer.error(err);
            }, function () {
                observer.complete();
            });
        });
    };
    GpioInstrumentService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    GpioInstrumentService.ctorParameters = [
        { type: TransportContainerService, },
        null,
    ];
    return GpioInstrumentService;
}(GenericInstrumentService));
//# sourceMappingURL=gpio-instrument.service.js.map