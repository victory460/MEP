import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { TransportContainerService } from '../transport/transport-container.service';
import { CommandUtilityService } from '../utilities/command-utility.service';
export var FileService = (function () {
    function FileService(transport) {
        this.transport = transport;
        this.commandUtilService = new CommandUtilityService();
    }
    //Set the output voltage of the specified DC power supply channel.
    FileService.prototype.write = function (location, path, file, filePosition) {
        var _this = this;
        filePosition = filePosition == undefined ? 0 : filePosition;
        var command = {
            file: [{
                    command: 'write',
                    type: location,
                    path: path,
                    filePosition: filePosition,
                    binaryOffset: 0,
                    binaryLength: file.byteLength
                }]
        };
        return Observable.create(function (observer) {
            var dataToSend = _this.commandUtilService.createChunkedArrayBuffer(command, file);
            console.log(String.fromCharCode.apply(null, dataToSend));
            _this.transport.writeRead('/', dataToSend, 'binary').subscribe(function (arrayBuffer) {
                var data;
                try {
                    var stringify = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer.slice(0)));
                    console.log(stringify);
                    data = JSON.parse(stringify);
                }
                catch (e) {
                    observer.error(e);
                    return;
                }
                if (data == undefined || data.agent != undefined) {
                    observer.error(data);
                    return;
                }
                if (data.file == undefined || data.file[0] == undefined || data.file[0].statusCode !== 0) {
                    observer.error(data);
                    return;
                }
                observer.next(data);
                observer.complete();
            }, function (err) {
                observer.error(err);
            }, function () {
                observer.complete();
            });
        });
    };
    //Set the output voltage of the specified DC power supply channel.
    FileService.prototype.read = function (location, path, filePosition, length) {
        var _this = this;
        var command = {
            file: [{
                    command: 'read',
                    type: location,
                    path: path,
                    filePosition: filePosition,
                    requestedLength: length
                }]
        };
        return Observable.create(function (observer) {
            _this.transport.writeRead('/', JSON.stringify(command), 'json').subscribe(function (arrayBuffer) {
                //Handle device errors and warnings
                /*let data;
                try {
                    data = JSON.parse(String.fromCharCode.apply(null, new Int8Array(arrayBuffer.slice(0))));
                }
                catch (e) {
                    observer.error(e);
                    return;
                }

                for (let i = 0; i < chans.length; i++) {
                    if (data.gpio == undefined || data.gpio[chans[i]][0].statusCode > 0 || data.agent != undefined) {
                        observer.error(data);
                        return;
                    }
                }
                observer.next(data);
                observer.complete();*/
                console.log(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));
                _this.commandUtilService.observableParseChunkedTransfer(arrayBuffer, 'u8').subscribe(function (data) {
                    console.log(data);
                    var jsonObject = data.json;
                    var binaryData = data.typedArray;
                    if (data == undefined || data.agent != undefined) {
                        observer.error(data);
                        return;
                    }
                    if (jsonObject.file == undefined || jsonObject.file[0] == undefined || jsonObject.file[0].statusCode !== 0) {
                        observer.error(data);
                        return;
                    }
                    observer.next({
                        jsonObject: jsonObject,
                        file: String.fromCharCode.apply(null, binaryData)
                    });
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                }, function () { });
            }, function (err) {
                observer.error(err);
            }, function () {
                observer.complete();
            });
        });
    };
    FileService.prototype.parseJsonResponse = function (commandObject) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.transport.writeRead('/', JSON.stringify(commandObject), 'json').subscribe(function (arrayBuffer) {
                var data;
                try {
                    var stringify = String.fromCharCode.apply(null, new Int8Array(arrayBuffer.slice(0)));
                    console.log(stringify);
                    data = JSON.parse(stringify);
                }
                catch (e) {
                    observer.error(e);
                    return;
                }
                if (data == undefined || data.agent != undefined) {
                    observer.error(data);
                    return;
                }
                for (var instrument in data) {
                    for (var channel in data[instrument]) {
                        if (data[instrument][channel][0].statusCode > 0) {
                            observer.error(data);
                            return;
                        }
                    }
                }
                observer.next(data);
                //Handle device errors and warnings
                observer.complete();
            }, function (err) {
                observer.error(err);
            }, function () {
                observer.complete();
            });
        });
    };
    FileService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    FileService.ctorParameters = [
        { type: TransportContainerService, },
    ];
    return FileService;
}());
//# sourceMappingURL=file.service.js.map