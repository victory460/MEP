import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { SimulatedAwgService } from './instruments/simulated-awg.service';
import { SimulatedDcService } from './instruments/simulated-dc.service';
import { SimulatedOscService } from './instruments/simulated-osc.service';
import { SimulatedTriggerService } from './instruments/simulated-trigger.service';
import { SimulatedLaService } from './instruments/simulated-la.service';
import { SimulatedGpioService } from './instruments/simulated-gpio.service';
import { SimulatedDeviceHelperService } from './simulated-device-helper.service';
import { CommandUtilityService } from '../utilities/command-utility.service';
export var SimulatedDeviceService = (function () {
    function SimulatedDeviceService(enumeration) {
        this.descriptor = enumeration;
        this.commandUtilityService = new CommandUtilityService();
        this.simDevService = new SimulatedDeviceHelperService();
        this.simDevService.setEnumeration(this.descriptor);
        this.awg = new SimulatedAwgService(this.simDevService);
        this.dc = new SimulatedDcService(this.simDevService);
        this.osc = new SimulatedOscService(this.simDevService);
        this.trigger = new SimulatedTriggerService(this.simDevService);
        this.la = new SimulatedLaService(this.simDevService);
        this.gpio = new SimulatedGpioService(this.simDevService);
    }
    SimulatedDeviceService.prototype.send = function (command) {
        var _this = this;
        return Observable.create(function (observer) {
            observer.next(_this.parseCommand(JSON.parse(command)));
            observer.complete();
        });
    };
    SimulatedDeviceService.prototype.parseCommand = function (event) {
        var _this = this;
        var responseObject = {};
        var sumStatusCode = 0;
        var binaryDataFlag = 0;
        var _loop_1 = function(instrument) {
            //create property on response object
            responseObject[instrument] = {};
            if (event[instrument][0] !== undefined && event[instrument][0].command !== undefined) {
                if (instrument === 'device') {
                    responseObject[instrument] = [];
                    var activeIndex = responseObject[instrument].push(this_1.processCommands(instrument, event[instrument][0], [])) - 1;
                    sumStatusCode += responseObject[instrument][activeIndex].statusCode;
                }
                else {
                    responseObject[instrument] = this_1.processCommands(instrument, event[instrument][0], []);
                    sumStatusCode += responseObject[instrument].statusCode;
                }
            }
            var _loop_2 = function(channel) {
                if (event[instrument][channel][0] !== undefined) {
                    //create property on response object 
                    responseObject[instrument][channel] = [];
                    event[instrument][channel].forEach(function (element, index, array) {
                        responseObject[instrument][channel].push(_this.processCommands(instrument, event[instrument][channel][index], [channel])) - 1;
                        if (element.command === 'read' && instrument !== 'gpio') {
                            binaryDataFlag = 1;
                        }
                    });
                }
            };
            for (var channel in event[instrument]) {
                _loop_2(channel);
            }
        };
        var this_1 = this;
        for (var instrument in event) {
            _loop_1(instrument);
        }
        if (binaryDataFlag) {
            return this.processBinaryDataAndSend(responseObject);
        }
        else {
            var response = JSON.stringify(responseObject);
            var buf = new ArrayBuffer(response.length);
            var bufView = new Uint8Array(buf);
            for (var i = 0; i < response.length; i++) {
                bufView[i] = response.charCodeAt(i);
            }
            return bufView.buffer;
        }
    };
    SimulatedDeviceService.prototype.processCommands = function (instrument, commandObject, params) {
        var command = instrument + commandObject.command;
        switch (command) {
            //---------- Device ----------
            case 'deviceenumerate':
                return this.descriptor;
            //---------- AWG ----------            
            case 'awgsetArbitraryWaveform':
                return this.awg.setArbitraryWaveform(params[0]);
            case 'awgsetRegularWaveform':
                return this.awg.setRegularWaveform(params[0], commandObject);
            case 'awgrun':
                return this.awg.run(params[0]);
            case 'awgstop':
                return this.awg.stop(params[0]);
            //---------- DC ----------        
            case 'dcsetVoltage':
                return this.dc.setVoltage(params[0], commandObject.voltage);
            case 'dcgetVoltage':
                return this.dc.getVoltage(params[0]);
            //---------- GPIO ----------        
            case 'gpiowrite':
                return this.gpio.write(params[0], commandObject.value);
            case 'gpioread':
                return this.gpio.read(params[0]);
            case 'gpiosetParameters':
                return this.gpio.setParameters(params[0], commandObject.direction);
            //-------- TRIGGER --------
            case 'triggersetParameters':
                return this.trigger.setParameters(params[0], commandObject.source, commandObject.targets);
            case 'triggersingle':
                return this.trigger.single();
            case 'triggerforceTrigger':
                return this.trigger.forceTrigger();
            case 'triggerstop':
                return this.trigger.stop();
            //---------- OSC ----------            
            case 'oscsetParameters':
                return this.osc.setParameters(params[0], commandObject);
            case 'oscread':
                return this.osc.read(params[0]);
            //---------- LA ----------            
            case 'lasetParameters':
                return this.la.setParameters(params[0], commandObject);
            case 'laread':
                return this.la.read(params[0]);
            default:
                return {
                    statusCode: 1,
                    errorMessage: 'Not a recognized command'
                };
        }
    };
    SimulatedDeviceService.prototype.processBinaryDataAndSend = function (commandObject) {
        var binaryDataContainer = {};
        var binaryOffset = 0;
        for (var instrument in this.trigger.targets) {
            if (instrument === 'osc' && commandObject[instrument] != undefined) {
                binaryDataContainer['osc'] = {};
                for (var channel in commandObject[instrument]) {
                    binaryDataContainer.osc[channel] = commandObject[instrument][channel][0].y;
                    commandObject[instrument][channel][0].binaryOffset = binaryOffset;
                    binaryOffset += commandObject[instrument][channel][0].binaryLength;
                    delete commandObject[instrument][channel][0].y;
                }
            }
            if (instrument === 'la' && commandObject[instrument] != undefined) {
                binaryDataContainer['la'] = {};
                var initialIteration = true;
                for (var channel in commandObject[instrument]) {
                    commandObject[instrument][channel][0].binaryOffset = binaryOffset;
                    if (initialIteration) {
                        initialIteration = false;
                        binaryDataContainer.la[channel] = commandObject[instrument][channel][0].y;
                        binaryOffset += commandObject[instrument][channel][0].binaryLength;
                    }
                    delete commandObject[instrument][channel][0].y;
                }
            }
        }
        var buf = new ArrayBuffer(binaryOffset);
        var bufView = new Uint8Array(buf);
        var binaryInjectorIndex = 0;
        var prevLength = 0;
        for (var instrument in binaryDataContainer) {
            for (var channel in binaryDataContainer[instrument]) {
                var unsignedConversion = new Uint8Array(binaryDataContainer[instrument][channel].buffer);
                binaryInjectorIndex += prevLength + unsignedConversion.length;
                for (var i = prevLength, j = 0; i < binaryInjectorIndex; i = i + 2, j = j + 2) {
                    bufView[i] = unsignedConversion[j];
                    bufView[i + 1] = unsignedConversion[j + 1];
                }
                prevLength = unsignedConversion.length;
                if (instrument === 'la') {
                    break;
                }
            }
        }
        return this.commandUtilityService.createChunkedArrayBuffer(commandObject, bufView.buffer).buffer;
    };
    SimulatedDeviceService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimulatedDeviceService.ctorParameters = [
        null,
    ];
    return SimulatedDeviceService;
}());
//# sourceMappingURL=simulated-device.service.js.map