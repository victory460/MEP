import { Injectable } from '@angular/core';
export var SimulatedDeviceHelperService = (function () {
    function SimulatedDeviceHelperService() {
        /*AWG Settings*/
        this.signalTypes = ['', '', '', '', '', '', '', ''];
        this.signalFreqs = [0, 0, 0, 0, 0, 0, 0, 0];
        this.vpps = [0, 0, 0, 0, 0, 0, 0, 0];
        this.vOffsets = [0, 0, 0, 0, 0, 0, 0, 0];
        /*Osc Parameters*/
        this.oscSampleFreqs = [0, 0, 0, 0, 0, 0, 0, 0];
        this.oscBufferSizes = [0, 0, 0, 0, 0, 0, 0, 0];
        this.laSampleFreqs = [0, 0, 0, 0, 0, 0, 0, 0];
        this.laBufferSizes = [0, 0, 0, 0, 0, 0, 0, 0];
    }
    SimulatedDeviceHelperService.prototype.setEnumeration = function (enumeration) {
        this.enumeration = enumeration;
    };
    SimulatedDeviceHelperService.prototype.getEnumeration = function () {
        return this.enumeration;
    };
    SimulatedDeviceHelperService.prototype.setTriggerArmed = function (triggerArmed) {
        this.triggerArmed = triggerArmed;
    };
    SimulatedDeviceHelperService.prototype.getTriggerArmed = function () {
        return this.triggerArmed;
    };
    SimulatedDeviceHelperService.prototype.setAwgSettings = function (settings, channel) {
        this.signalTypes[channel] = settings.signalType;
        this.signalFreqs[channel] = settings.signalFreq;
        this.vpps[channel] = settings.vpp;
        this.vOffsets[channel] = settings.vOffset;
    };
    SimulatedDeviceHelperService.prototype.getAwgSettings = function (channel) {
        return {
            signalType: this.signalTypes[channel],
            signalFreq: this.signalFreqs[channel],
            vpp: this.vpps[channel],
            vOffset: this.vOffsets[channel]
        };
    };
    //Not sure if needed after moving read to oscope but here we go anyways TODO tag for future delete
    SimulatedDeviceHelperService.prototype.setOscParameters = function (parameters, channel) {
        this.oscSampleFreqs[channel] = parameters.sampleFreq;
        this.oscBufferSizes[channel] = parameters.bufferSize;
    };
    SimulatedDeviceHelperService.prototype.getOscParameters = function (channel) {
        return {
            sampleFreq: this.oscSampleFreqs[channel],
            bufferSize: this.oscBufferSizes[channel]
        };
    };
    SimulatedDeviceHelperService.prototype.setLaParameters = function (parameters, channel) {
        this.laSampleFreqs[channel] = parameters.sampleFreq;
        this.laBufferSizes[channel] = parameters.bufferSize;
    };
    SimulatedDeviceHelperService.prototype.getLaParameters = function (channel) {
        return {
            sampleFreq: this.laSampleFreqs[channel],
            bufferSize: this.laBufferSizes[channel]
        };
    };
    SimulatedDeviceHelperService.prototype.setTriggerTargets = function (targets) {
        this.targets = targets;
    };
    SimulatedDeviceHelperService.prototype.getTriggerTargets = function () {
        return this.targets;
    };
    SimulatedDeviceHelperService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimulatedDeviceHelperService.ctorParameters = [];
    return SimulatedDeviceHelperService;
}());
//# sourceMappingURL=simulated-device-helper.service.js.map