import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { SimulatedAwgService } from './instruments/simulated-awg.service';
import { SimulatedDcService } from './instruments/simulated-dc.service';
import { SimulatedOscService } from './instruments/simulated-osc.service';
import { SimulatedTriggerService } from './instruments/simulated-trigger.service';
import { SimulatedLaService } from './instruments/simulated-la.service';
import { SimulatedGpioService } from './instruments/simulated-gpio.service';
import { SimulatedDeviceHelperService } from './simulated-device-helper.service';
import { CommandUtilityService } from '../utilities/command-utility.service';
export declare class SimulatedDeviceService {
    streamState: {
        mode: string;
        remainingSamples: number;
    };
    descriptor: any;
    awg: SimulatedAwgService;
    dc: SimulatedDcService;
    la: SimulatedLaService;
    osc: SimulatedOscService;
    trigger: SimulatedTriggerService;
    gpio: SimulatedGpioService;
    simDevService: SimulatedDeviceHelperService;
    commandUtilityService: CommandUtilityService;
    constructor(enumeration: any);
    send(command: any): Observable<any>;
    parseCommand(event: any): ArrayBuffer;
    processCommands(instrument: any, commandObject: any, params: any): any;
    processBinaryDataAndSend(commandObject: any): ArrayBuffer;
}
