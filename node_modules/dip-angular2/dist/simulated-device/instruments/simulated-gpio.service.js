import { Injectable } from '@angular/core';
import { SimulatedDeviceHelperService } from '../simulated-device-helper.service';
export var SimulatedGpioService = (function () {
    function SimulatedGpioService(_simulatedDeviceService) {
        this.values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.directions = ['input', 'input', 'input', 'input', 'input', 'input', 'input', 'input', 'input', 'input'];
        this.counter = 1;
        this.prevChannel = -1;
        this.simulatedDeviceService = _simulatedDeviceService;
    }
    SimulatedGpioService.prototype.counterVal = function (_chan) {
        if (parseInt(_chan) <= this.prevChannel) {
            this.counter++;
        }
        this.values[_chan] = (this.counter & Math.pow(2, _chan - 1)) > 0 ? 1 : 0;
        this.prevChannel = parseInt(_chan);
    };
    SimulatedGpioService.prototype.read = function (_chan) {
        this.counterVal(_chan);
        return {
            command: 'read',
            value: this.values[_chan],
            direction: this.directions[_chan],
            statusCode: 0,
            wait: 100
        };
    };
    SimulatedGpioService.prototype.write = function (_chan, _value) {
        this.values[_chan] = _value;
        return {
            command: 'write',
            statusCode: 0,
            wait: 500
        };
    };
    SimulatedGpioService.prototype.setParameters = function (_chan, _direction) {
        this.values[_chan] = _direction;
        return {
            command: 'setParameters',
            statusCode: 0,
            wait: 100
        };
    };
    SimulatedGpioService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimulatedGpioService.ctorParameters = [
        { type: SimulatedDeviceHelperService, },
    ];
    return SimulatedGpioService;
}());
//# sourceMappingURL=simulated-gpio.service.js.map