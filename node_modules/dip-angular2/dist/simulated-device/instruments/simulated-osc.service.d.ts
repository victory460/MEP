import { SimulatedDeviceHelperService } from '../simulated-device-helper.service';
export declare class SimulatedOscService {
    private simulatedDeviceService;
    private buffers;
    private offsets;
    private gains;
    private sampleFreqs;
    private bufferSizes;
    private delays;
    private defaultAwgSettings;
    private defaultOscSettings;
    constructor(_simulatedDeviceService: SimulatedDeviceHelperService);
    setParameters(chan: any, commandObject: any): {
        "command": string;
        "actualOffset": any;
        "actualSampleFreq": any;
        "statusCode": number;
        "wait": number;
    };
    read(chan: any): {};
    drawDefault(): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: number;
        actualGain: number;
    };
    drawSine(awgSettings: any, oscSettings: any, chan: any): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: any;
        actualGain: number;
    };
    drawSquare(awgSettings: any, oscSettings: any, chan: any): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: any;
        actualGain: number;
    };
    drawTriangle(awgSettings: any, oscSettings: any, chan: any): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: any;
        actualGain: number;
    };
    drawSawtooth(awgSettings: any, oscSettings: any, chan: any): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: any;
        actualGain: number;
    };
    drawDc(awgSettings: any, oscSettings: any, chan: any): {
        command: string;
        statusCode: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        triggerDelay: number;
        actualVOffset: any;
        actualGain: number;
    };
}
