import { SimulatedDeviceHelperService } from '../simulated-device-helper.service';
export declare class SimulatedLaService {
    private simulatedDeviceService;
    private buffers;
    private sampleFreqs;
    private bufferSizes;
    private bitmasks;
    private triggerDelays;
    private laDescriptor;
    constructor(_simulatedDeviceService: SimulatedDeviceHelperService);
    getCurrentState(chan: any): {
        command: string;
        statusCode: number;
        state: string;
        acqCount: number;
        bitmask: number;
        actualSampleFreq: number;
        actualBufferSize: number;
        triggerDelay: number;
        wait: number;
    };
    setParameters(chan: any, commandObject: any): {
        "command": string;
        "statusCode": number;
        "actualSampleFreq": number;
        "wait": number;
    };
    read(chan: any): {
        command: string;
        statusCode: number;
        wait: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        bitmask: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        actualTriggerDelay: number;
    };
    generateLaData(channel: number): {
        command: string;
        statusCode: number;
        wait: number;
        binaryLength: number;
        binaryOffset: any;
        acqCount: number;
        bitmask: number;
        actualSampleFreq: number;
        y: Int16Array;
        pointOfInterest: number;
        triggerIndex: number;
        actualTriggerDelay: number;
    };
}
