import { Injectable } from '@angular/core';
import { SimulatedDeviceHelperService } from '../simulated-device-helper.service';
export var SimulatedLaService = (function () {
    function SimulatedLaService(_simulatedDeviceService) {
        this.buffers = [];
        this.sampleFreqs = [];
        this.bufferSizes = [];
        this.bitmasks = [];
        this.triggerDelays = [];
        this.simulatedDeviceService = _simulatedDeviceService;
        this.laDescriptor = this.simulatedDeviceService.getEnumeration().la;
        for (var i = 0; i < this.laDescriptor.numChans; i++) {
            this.buffers.push([]);
            this.sampleFreqs.push(0);
            this.bufferSizes.push(0);
            this.bitmasks.push(0);
            this.triggerDelays.push(0);
        }
    }
    SimulatedLaService.prototype.getCurrentState = function (chan) {
        return {
            command: "getCurrentState",
            statusCode: 0,
            state: "idle",
            acqCount: 0,
            bitmask: this.bitmasks[chan],
            actualSampleFreq: this.sampleFreqs[chan],
            actualBufferSize: this.bufferSizes[chan],
            triggerDelay: this.triggerDelays[chan],
            wait: 0
        };
    };
    SimulatedLaService.prototype.setParameters = function (chan, commandObject) {
        this.sampleFreqs[chan] = commandObject.sampleFreq;
        this.bufferSizes[chan] = commandObject.bufferSize;
        this.triggerDelays[chan] = commandObject.triggerDelay;
        this.bitmasks[chan] = commandObject.bitmask;
        this.simulatedDeviceService.setLaParameters(commandObject, chan);
        return {
            "command": "setParameters",
            "statusCode": 0,
            "actualSampleFreq": this.sampleFreqs[chan],
            "wait": 0
        };
    };
    SimulatedLaService.prototype.read = function (chan) {
        return this.generateLaData(chan);
    };
    SimulatedLaService.prototype.generateLaData = function (channel) {
        var maxBufferSize = Math.max.apply(Math, this.bufferSizes);
        var typedArray = new Int16Array(maxBufferSize);
        for (var i = 0; i < typedArray.length; i++) {
            typedArray[i] = i;
        }
        return {
            command: "read",
            statusCode: 0,
            wait: 0,
            binaryLength: 2 * typedArray.length,
            binaryOffset: null,
            acqCount: 3,
            bitmask: this.bitmasks[channel],
            actualSampleFreq: this.sampleFreqs[channel],
            y: typedArray,
            pointOfInterest: this.bufferSizes[channel] / 2,
            triggerIndex: this.bufferSizes[channel] / 2,
            actualTriggerDelay: this.triggerDelays[channel]
        };
    };
    SimulatedLaService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimulatedLaService.ctorParameters = [
        { type: SimulatedDeviceHelperService, },
    ];
    return SimulatedLaService;
}());
//# sourceMappingURL=simulated-la.service.js.map