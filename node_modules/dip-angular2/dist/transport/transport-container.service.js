import { Injectable } from '@angular/core';
import 'rxjs/Rx';
import { HttpTransportService } from './http-transport.service';
import { LocalTransportService } from './local-transport.service';
export var TransportContainerService = (function () {
    function TransportContainerService(_uri, httpTimeout) {
        this.transport = new HttpTransportService(_uri, httpTimeout);
        this.httpTimeout = httpTimeout;
    }
    //Set transport uri
    TransportContainerService.prototype.setUri = function (uri) {
        this.transport.setUri(uri);
    };
    TransportContainerService.prototype.getUri = function () {
        return this.transport.getUri();
    };
    //Get request on the specified url
    TransportContainerService.prototype.getRequest = function (requestUrl, timeout) {
        return this.transport.getRequest(requestUrl, timeout);
    };
    //Call writeRead on transport component
    TransportContainerService.prototype.writeRead = function (endpoint, sendData, dataType) {
        return this.transport.writeRead(endpoint, sendData, dataType);
    };
    //Call streamFrom on stransport component
    TransportContainerService.prototype.streamFrom = function (endpoint, sendData, dataType, delay) {
        if (delay === void 0) { delay = 0; }
        return this.transport.streamFrom(endpoint, sendData, dataType, delay);
    };
    //Stop all transport streams
    TransportContainerService.prototype.stopStream = function () {
        this.transport.stopStream();
    };
    //Get type of transport service
    TransportContainerService.prototype.getType = function () {
        return this.transport.getType();
    };
    TransportContainerService.prototype.setHttpTransport = function (uri) {
        delete this.transport;
        this.transport = new HttpTransportService(uri, this.httpTimeout);
    };
    TransportContainerService.prototype.setLocalTransport = function (deviceEnumeration) {
        delete this.transport;
        this.transport = new LocalTransportService(deviceEnumeration);
    };
    TransportContainerService.prototype.setHttpTimeout = function (newHttpTimeout) {
        this.httpTimeout = newHttpTimeout;
        this.transport.setTimeout(newHttpTimeout);
    };
    TransportContainerService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TransportContainerService.ctorParameters = [
        null,
        null,
    ];
    return TransportContainerService;
}());
//# sourceMappingURL=transport-container.service.js.map